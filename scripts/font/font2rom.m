%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% This file is part of the N64 RGB/YPbPr DAC project.
%
% Copyright (C) 2015-2024 by Peter Bartmann <borti4938@gmail.com>
%
% N64 RGB/YPbPr DAC is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program.  If not, see <http:/www.gnu.org/licenses/>.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%#ok<*UNRCH>

use_BRAM_implementation = 0;

fileName = 'font_rom'; % file-name for verilog file (/wo extension)
targetFolder = '../../rtl/misc/';   % target folder for rom file

% load_font;
load_reduced_font;

reduce_cases = 1;

fid = fopen([fileName '.v'],'w');

fprintf(fid, ...
 ['//////////////////////////////////////////////////////////////////////////////////\n' ...
  '//\n' ...
  '// This file is part of the N64 RGB/YPbPr DAC project.\n' ...
  '//\n' ...
  '// Copyright (C) 2015-2024 by Peter Bartmann <borti4938@gmail.com>\n' ...
  '//\n' ...
  '// N64 RGB/YPbPr DAC is free software: you can redistribute it and/or modify\n' ...
  '// it under the terms of the GNU General Public License as published by\n' ...
  '// the Free Software Foundation, either version 3 of the License, or\n' ...
  '// any later version.\n' ...
  '//\n' ...
  '// This program is distributed in the hope that it will be useful,\n' ...
  '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n' ...
  '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n' ...
  '// GNU General Public License for more details.\n' ...
  '//\n' ...
  '// You should have received a copy of the GNU General Public License\n' ...
  '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n' ...
  '//\n' ...
  '//////////////////////////////////////////////////////////////////////////////////\n' ...
  '//\n' ...
  '// Company:  Circuit-Board.de\n' ...
  '// Engineer: borti4938\n' ...
  '//\n' ...
  '// Module Name:    ' fileName '\n' ...
  '// Project Name:   N64 Advanced RGB/YPbPr DAC Mod\n' ...
  '// Target Devices: Max10, Cyclone IV and Cyclone 10 LP devices\n' ...
  '// Tool versions:  Altera Quartus Prime\n' ...
  '// Description:    simple line-multiplying\n' ...
  '//\n' ...
  '// Features: ip independent implementation of font rom\n' ...
  '//\n' ...
  '// This file is auto generated by script/font2rom.m\n' ...
  '//\n' ...
  '//////////////////////////////////////////////////////////////////////////////////\n' ...
  '\n\n'  ...
  'module ' fileName '(\n' ...
  '  CLK,\n' ...
  '  nRST,\n' ...
  '  char_addr,\n' ...
  '  char_line,\n' ...
  '  rden,\n' ...
  '  rddata\n' ...
  ');' ...
  '\n\n' ...
  'input       CLK;\n' ...
  'input       nRST;\n' ...
  'input [6:0] char_addr;\n' ...
  'input [3:0] char_line;\n' ...
  'input       rden;\n' ...
  '\n' ...
  'output reg [7:0] rddata = 8''h0;\n' ...
  '\n\n' ...
  'reg [10:0] addr_r = 11''h00;\n' ...
  'reg        rden_r =  1''b0;\n']);

if use_BRAM_implementation
  fprintf(fid, ...
   ['\n' ...
    'reg [7:0] font_mem[0:%04d] /* synthesis ramstyle = "M9K" */;\n' ...
    'initial begin\n'...
   ],length(font8x12)-1);
  for idx = 1:length(font8x12)
    fprintf(fid,'  font_mem[%04d] = %03d;\n', idx-1, font8x12(idx));
  end
  fprintf(fid,'end\n');
end

fprintf(fid, ...
 ['\n' ...
  'always @(posedge CLK or negedge nRST)\n' ...
  '  if (!nRST) begin\n' ...
  '    rddata <= 8''h0;\n' ...
  '    addr_r <= 11''h00;\n' ...
  '    rden_r <= 1''b0;\n' ...
  '  end else begin\n' ...
  '    addr_r <= {char_line,char_addr};\n' ...
  '    rden_r <= rden;\n' ...
  '\n' ...
  '    if (rden_r)\n']);

if use_BRAM_implementation
  fprintf(fid,'      rddata <= font_mem[addr_r];\n');
else
   fprintf(fid,'      case (addr_r)\n');
   if (reduce_cases == 0)
     for idx = 1:length(font8x12)
       fprintf(fid,'        %04d: rddata <= %03d;\n', idx-1, font8x12(idx));
     end
   else
     for idx = 1:length(font8x12)
       if font8x12(idx) > 0
        fprintf(fid,'        %04d:    rddata <= %03d;\n', idx-1, font8x12(idx));
       end
     end
     fprintf(fid,'        default: rddata <= 000;\n');
   end
   fprintf(fid,'    endcase\n');
end

fprintf(fid, ...
 ['  end\n' ...
  '\n' ...
  'endmodule\n']);

fclose(fid);
movefile([fileName '.v'],[targetFolder fileName '.v']); 